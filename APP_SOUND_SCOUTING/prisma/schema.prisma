// Esquema para Sound Scouting - Aplicación de localización de sonido para producciones cinematográficas

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model TechnicianConfig {
  id        String   @id @default(cuid())
  fullName  String
  company   String
  email     String   @unique
  phone     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Project {
  id          String            @id @default(cuid())
  name        String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  sets        LocationSet[]
  reports     SoundScoutingReport[]
}

model LocationSet {
  id                   String           @id @default(cuid())
  projectId            String
  title                String
  evaluation           EvaluationStatus @default(SIN_EVALUAR)
  tags                 String
  noiseObservations    String
  technicalRequirements String
  coordinatesLatitude  Float?
  coordinatesLongitude Float?
  coordinatesAccuracy  Float?
  coordinatesTimestamp DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  project              Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  photos               LocationPhoto[]
  reportSets           ReportSet[]
}

model LocationPhoto {
  id         String   @id @default(cuid())
  url        String
  caption    String?
  timestamp  DateTime @default(now())
  fileSize   Int
  setId      String
  set        LocationSet @relation(fields: [setId], references: [id], onDelete: Cascade)
}

model SoundScoutingReport {
  id            String   @id @default(cuid())
  projectId     String
  projectName   String
  technicianId  String
  generatedAt   DateTime @default(now())
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technician    TechnicianConfig @relation(fields: [technicianId], references: [id])
  reportSets    ReportSet[]
}

model ReportSet {
  id         String      @id @default(cuid())
  reportId   String
  setId      String
  report     SoundScoutingReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  set        LocationSet         @relation(fields: [setId], references: [id], onDelete: Cascade)
}

enum EvaluationStatus {
  APTO
  NO_APTO
  SIN_EVALUAR
}